import Message, { MessageType, ReturnCode } from '../dist/nodejs'

it('normal query', () => {
  const request = new Message(43825)
  request.addQuestion('www.example.com')
  const encodedRequest = request.encode()
  expect(Array.from(encodedRequest)).toEqual([0xab, 0x31, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01])

  const decodedRequest = Message.parse(encodedRequest.buffer as ArrayBuffer)
  expect(decodedRequest).toEqual(request)

  decodedRequest.type = MessageType.response
  decodedRequest.recursionAvailable = true
  decodedRequest.addAddress('www.example.com', 20680, '93.184.216.34')

  const encodedAnswer = decodedRequest.encode()
  expect(Array.from(encodedAnswer)).toEqual([0xab, 0x31, 0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x50, 0xc8, 0x00, 0x04, 0x5d, 0xb8, 0xd8, 0x22])

  const decodedAnswer = Message.parse(encodedAnswer.buffer as ArrayBuffer)
  expect(decodedAnswer).toEqual(decodedRequest)
})

it('name not found query', () => {
  const request = new Message(0x7203)
  request.addQuestion('www.example.comy')
  const encodedRequest = request.encode()
  expect(Array.from(encodedRequest)).toEqual([0x72, 0x03, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x04, 0x63, 0x6f, 0x6d, 0x79, 0x00, 0x00, 0x01, 0x00, 0x01])

  const decodedRequest = Message.parse(encodedRequest.buffer as ArrayBuffer)
  expect(decodedRequest).toEqual(request)

  decodedRequest.type = MessageType.response
  decodedRequest.recursionAvailable = true
  decodedRequest.returnCode = ReturnCode.nameError

  const encodedAnswer = decodedRequest.encode()
  expect(Array.from(encodedAnswer)).toEqual([0x72, 0x03, 0x81, 0x83, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x04, 0x63, 0x6f, 0x6d, 0x79, 0x00, 0x00, 0x01, 0x00, 0x01])

  const decodedAnswer = Message.parse(encodedAnswer.buffer as ArrayBuffer)
  expect(decodedAnswer).toEqual(decodedRequest)
})

it('CNAME answer', () => {
  const request = new Message(43825)
  request.addQuestion('www.baidu.com')
  const encodedRequest = request.encode()
  expect(Array.from(encodedRequest)).toEqual([0xab, 0x31, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77, 0x05, 0x62, 0x61, 0x69, 0x64, 0x75, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01])

  const decodedRequest = Message.parse(encodedRequest.buffer as ArrayBuffer)
  expect(decodedRequest).toEqual(request)

  decodedRequest.type = MessageType.response
  decodedRequest.recursionAvailable = true
  decodedRequest.addCNAME('www.baidu.com', 429, 'www.a.shifen.com')
  decodedRequest.addAddress('www.a.shifen.com', 134, '115.239.211.112')
  decodedRequest.addAddress('www.a.shifen.com', 134, '115.239.210.27')

  const encodedAnswer = decodedRequest.encode()
  expect(Array.from(encodedAnswer)).toEqual([0xab, 0x31, 0x81, 0x80, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77, 0x77, 0x05, 0x62, 0x61, 0x69, 0x64, 0x75, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x01, 0xad, 0x00, 0x0f, 0x03, 0x77, 0x77, 0x77, 0x01, 0x61, 0x06, 0x73, 0x68, 0x69, 0x66, 0x65, 0x6e, 0xc0, 0x16, 0xc0, 0x2b, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x86, 0x00, 0x04, 0x73, 0xef, 0xd3, 0x70, 0xc0, 0x2b, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x86, 0x00, 0x04, 0x73, 0xef, 0xd2, 0x1b])

  const decodedAnswer = Message.parse(encodedAnswer.buffer as ArrayBuffer)
  expect(decodedAnswer).toEqual(decodedRequest)
})
